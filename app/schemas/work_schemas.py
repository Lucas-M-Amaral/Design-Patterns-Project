from datetime import datetime
from pydantic import BaseModel, Field, ConfigDict
from typing import List


# Work Schemas
class WorkCreate(BaseModel):
    """Schema for creating a new work (assignment)."""
    title: str = Field(..., max_length=255, description="Title of the work")
    questions: List[str] = Field(..., description="List of questions for the work")
    course_id: int = Field(..., description="ID of the course")


class WorkRead(BaseModel):
    """Schema for reading a work."""
    id: int = Field(..., description="Unique identifier of the work")
    title: str = Field(..., description="Title of the work")
    questions: List[str] = Field(..., description="List of questions")
    course_id: int = Field(..., description="ID of the course")

    model_config = ConfigDict(from_attributes=True)


# Work Answer Schemas
class WorkAnswerCreate(BaseModel):
    """Schema for submitting or updating a student's answer."""
    work_id: int = Field(..., description="ID of the work")
    answers: List[str] = Field(..., description="List of student's answers")


class WorkAnswerRead(BaseModel):
    """Schema for reading a student's submitted answer."""
    id: int = Field(..., description="Unique identifier of the answer")
    work_id: int = Field(..., description="ID of the work")
    student_id: int = Field(..., description="ID of the student")
    answers: List[str] = Field(..., description="List of student's answers")
    updated_at: datetime = Field(..., description="Date when the answer was last updated")

    model_config = ConfigDict(from_attributes=True)


# Notification Schemas
class NotificationRead(BaseModel):
    """Schema for reading notifications (Observer events)."""
    recipient_type: str = Field(..., description="Type of recipient: 'student' or 'instructor'")
    recipient_id: int = Field(..., description="ID of the recipient")
    message: str = Field(..., description="Notification message")



# Combined Response Schemas
class WorkWithNotifications(BaseModel):
    """Response when a work is created or updated, including notifications."""
    work: WorkRead = Field(..., description="Created or updated work data")
    notifications: List[NotificationRead] = Field(
        default_factory=list,
        description="List of notifications generated by this action"
    )


class WorkAnswerWithNotifications(BaseModel):
    """Response when a student submits or updates an answer, including notifications."""
    answer: WorkAnswerRead = Field(..., description="Submitted or updated answer data")
    notifications: List[NotificationRead] = Field(
        default_factory=list,
        description="List of notifications generated by this action"
    )
